<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Dabeen`s Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://dabeen.me/"/>
  <updated>2016-09-22T17:47:25.000Z</updated>
  <id>http://dabeen.me/</id>
  
  <author>
    <name><![CDATA[Dabeen Lee]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[读图解密码技术]]></title>
    <link href="http://dabeen.me/2016/09/22/du-tu-jie-mi-ma-ji-shu/"/>
    <id>http://dabeen.me/2016/09/22/du-tu-jie-mi-ma-ji-shu/</id>
    <published>2016-09-21T16:00:00.000Z</published>
    <updated>2016-09-22T17:47:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-__u5BC6_u7801_u5B66_u5BB6_u7684_u5DE5_u5177_u7BB1"><a href="#1-__u5BC6_u7801_u5B66_u5BB6_u7684_u5DE5_u5177_u7BB1" class="headerlink" title="1. 密码学家的工具箱"></a>1. 密码学家的工具箱</h3><ul>
<li>对称密码</li>
<li>公钥密码</li>
<li>单向散列函数</li>
<li>消息认证码</li>
<li>数字签名</li>
<li>伪随机数生成器</li>
</ul>
<blockquote>
<p>出自《网络信息安全的真相》一书</p>
</blockquote>
<h3 id="2-__u5BC6_u7801_u4E0E_u4FE1_u606F_u5B89_u5168_u5E38_u8BC6"><a href="#2-__u5BC6_u7801_u4E0E_u4FE1_u606F_u5B89_u5168_u5E38_u8BC6" class="headerlink" title="2. 密码与信息安全常识"></a>2. 密码与信息安全常识</h3><ul>
<li>不要使用保密的密码算法</li>
<li>使用低强度的密码比不进行任何加密更加危险</li>
<li>任何密码总有一天会被破解</li>
<li>密码只是信息安全的一部分</li>
</ul>
<a id="more"></a>
<h3 id="3-__u5BF9_u79F0_u5BC6_u7801"><a href="#3-__u5BF9_u79F0_u5BC6_u7801" class="headerlink" title="3. 对称密码"></a>3. 对称密码</h3><p><em>使用相同的密钥进行加密解密。</em></p>
<h4 id="DES__28Data_Encryption_Standard_29"><a href="#DES__28Data_Encryption_Standard_29" class="headerlink" title="DES (Data Encryption Standard)"></a>DES (Data Encryption Standard)</h4><ul>
<li><p><strong>DES是啥</strong></p>
<p> DES是1977年美国联邦信息处理标准（FIPS）中所采用的哟中对称密码。<br> RSA公司举办过破译DES密钥的比赛，在1999年的DES Challenge III 中只用了22小时15分钟就破译了。<br> 所以DES可以在段时间内被破译，我们不应该使用它。</p>
</li>
<li><p><strong>加密和解密</strong></p>
<p> DES是一种将64比特明文加密成64比特密文的对称密码算法，因为每隔7位都会设置1个用于错误检查的比特，所以它的实际密钥长度是56比特。<br> 以分组为单位进行加密的密码算法叫<strong>分组密码</strong>。<br> DES是一种<strong>分组密码</strong>，每64比特为一个分组。<br> 对一个比较长的数据进行加密时就需要进行迭代，迭代的具体方式就叫做<strong>模式</strong>。<br> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img1.png" alt="img1"></p>
</li>
<li><p><strong>DES的结构</strong><br> DES的结构由 Horst Feistel 设计的，因此也称为 <strong>Feistel 网络</strong>、<strong>Feistel 结构</strong>、<strong>Feistel 密码</strong>。<br> 在 Feistel 网络中加密步骤称作<strong>轮</strong>，整个加密过程就是经过若干次轮的循环。DES是一种16轮的 Feistel 网络。    </p>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img2.png" alt="一轮">       </p>
<blockquote>
<p>一轮     </p>
</blockquote>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-jiami.png" alt="加密"> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-jiemi.png" alt="解密">    </p>
<blockquote>
<p>加密和解密的过程</p>
</blockquote>
<p> Feistel 网络的特性：    </p>
<ol>
<li>轮数可以任意增加。</li>
<li>加密时无论使用任何函数作为轮函数都可以正确解密。</li>
<li>加密和解密使用完全相同的结构实现。</li>
</ol>
</li>
</ul>
<h4 id="3DES__28triple-DES_29"><a href="#3DES__28triple-DES_29" class="headerlink" title="3DES (triple-DES)"></a>3DES (triple-DES)</h4><ul>
<li><p><strong>3DES是啥</strong><br> 三重DES就是将DES重复三次,缩写为3DES。<br> 3DES处理速度不高，而且在安全性方面也逐渐显现出一些问题。</p>
</li>
<li><p><strong>加密</strong><br> 过程：加密-&gt;解密-&gt;加密    </p>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-3des.png" alt="3des"></p>
<blockquote>
<p>加密</p>
</blockquote>
</li>
<li><p><strong>解密</strong></p>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/3des-jiemi.png" alt="3des-解密"></p>
<blockquote>
<p>解密</p>
</blockquote>
</li>
</ul>
<h4 id="AES_uFF08Advanced_Encryption_Standard_uFF09"><a href="#AES_uFF08Advanced_Encryption_Standard_uFF09" class="headerlink" title="AES（Advanced Encryption Standard）"></a>AES（Advanced Encryption Standard）</h4><ul>
<li><p><strong>AES是啥</strong></p>
<p> AES是为了取代前任标准DES而生的一种对称密码算法。美国的一个标准化机构NIST，组织了AES的公开竞选活动，从1997年开始，NIST开始公开募集AES，2000年10月2日 <strong>Rijndael</strong> 被最终选定为AES标准。</p>
</li>
<li><p><strong>什么是Rijndael</strong></p>
<p> <strong>Rijndael</strong> 是有比利时的密码学家 <strong>Joan Daemen</strong> 和 <strong>Vincent Rijmen</strong> 设计的分组密码算法。<br> <strong>Rijndael</strong> 的分组长度为128比特，密钥长度可以以32比特为单位在128比特和256比特之间进行选择（在AES的规范里，密钥长度只有128、192、256）。</p>
</li>
<li><p><strong>Rijndael的加密与解密</strong></p>
<p> <strong>Rijndael</strong> 同样也是按<strong>轮</strong>进行加密的    ，与DES使用的 <strong>Feistel 结构</strong>不同，<strong>Rijndael</strong> 使用的是 <strong>SPN 结构</strong>。</p>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-aes.png" alt="AES 的轮"></p>
<blockquote>
<p>AES加密的一轮</p>
</blockquote>
<p> SubBytes 处理就是从一张替换表中（S-Box）查找对应的值进行替换。<br> ShiftRows 处理是对上一步的结果，按规律进行打乱。<br> MixColumns 对一个4字节的值进行比特运算，让其编程另外一个4字节的值。<br> AddRoundKey 与轮密钥进行 XOR 运算。</p>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-aes-jiemi.png" alt="AES 解密的议论"></p>
<blockquote>
<p>AES解密的一轮<br> 解密时分别进行上述步骤的逆向运算。</p>
</blockquote>
</li>
</ul>
<h4 id="u5BF9_u4E8E_u5BF9_u79F0_u5BC6_u7801_u5E94_u8BE5_u4F7F_u7528_u90A3_u79CD_u7B97_u6CD5_u5462"><a href="#u5BF9_u4E8E_u5BF9_u79F0_u5BC6_u7801_u5E94_u8BE5_u4F7F_u7528_u90A3_u79CD_u7B97_u6CD5_u5462" class="headerlink" title="对于对称密码应该使用那种算法呢"></a>对于对称密码应该使用那种算法呢</h4><p>当然是AES。。也就是 Rijndael。</p>
<h4 id="u5206_u7EC4_u5BC6_u7801_u7684_u6A21_u5F0F"><a href="#u5206_u7EC4_u5BC6_u7801_u7684_u6A21_u5F0F" class="headerlink" title="分组密码的模式"></a>分组密码的模式</h4><ul>
<li><strong>模式是啥</strong></li>
</ul>
<p>DES和AES都属于分组密码，他们只能加密固定长度的明文，所以我们如果要加密一段很长的明文，就要对明文进行分组迭代加密，具体的迭代方式就叫做模式。</p>
<ul>
<li><p><strong>常见的模式</strong></p>
<ul>
<li>ECB 模式：Electronic CodeBook mode （电子密码本模式）</li>
<li>CBC 模式：Cipher Block Chaining mode (密码分组链接模式)</li>
<li>CFB 模式：Cipher FeedBack mode （密文反馈模式）</li>
<li>OFB 模式：Output FeedBack mode （输出反馈模式）</li>
<li>CTR 模式：CounTer mode （计数器模式）</li>
</ul>
</li>
<li><p><strong>各种模式的比较</strong></p>
<p> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-mode1.png" alt="mode 对比"><br> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-mode2.png" alt="mode 对比"></p>
</li>
<li><p><strong>代码</strong></p>
<p> php 代码：    </p>
</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 加密</span><br><span class="line"><span class="variable">$message</span> = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, <span class="variable">$this-</span>&gt;getKey(), <span class="variable">$message</span>, MCRYPT_MODE_CBC, <span class="variable">$this-</span>&gt;getIv()); </span><br><span class="line">// 解密</span><br><span class="line"><span class="variable">$message</span> = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, <span class="variable">$this-</span>&gt;getKey(), <span class="variable">$message</span>, MCRYPT_MODE_CBC, <span class="variable">$this-</span>&gt;getIv());</span><br></pre></td></tr></table></figure>
<h3 id="4-__u516C_u94A5_u5BC6_u7801"><a href="#4-__u516C_u94A5_u5BC6_u7801" class="headerlink" title="4. 公钥密码"></a>4. 公钥密码</h3><h4 id="u4EC0_u4E48_u662F_u516C_u94A5_u5BC6_u7801"><a href="#u4EC0_u4E48_u662F_u516C_u94A5_u5BC6_u7801" class="headerlink" title="什么是公钥密码"></a>什么是公钥密码</h4><ul>
<li><p><strong>密钥配送问题</strong><br><img src="http://7xq7um.com1.z0.glb.clouddn.com/img-rsa1.png" alt="对称密码的问题"></p>
</li>
<li><p><strong>公钥密码</strong></p>
<p> 公钥密码中，密钥分为加密密钥和解密密钥，发送者使用加密密钥进行加密，接收者使用解密密钥进行解密。<br> 加密密钥一般是公开的，叫做公钥（public key）。<br> 解密密钥是不可以公开的，叫做私钥（private key）。<br> 公钥和私钥是一一对应的关系，一对公钥和私钥称为密钥对（key pair）。    </p>
</li>
</ul>
<h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><ul>
<li><p><strong>什么是RSA</strong></p>
<p> RSA是一种公钥密码算法，它的名字由它的三位开发者的名字的首字母组成。（Ron Rivest、Adi Shamir 和 Leonard Adleman）</p>
</li>
<li><p><strong>RSA 加密</strong></p>
<p> <strong>密文 = 明文<sup>E</sup> mod N</strong><br> E和N的组合就是公钥</p>
</li>
<li><p><strong>RSA 解密</strong></p>
<p> <strong>明文 = 密文<sup>D</sup> mod N</strong><br> D和N的组合就是私钥</p>
</li>
<li><p><strong>生成密钥对</strong></p>
<ol>
<li><p>求N<br> 准备两个很大的质数 p 和 q, N = p * q。</p>
</li>
<li><p>求L（L是仅在生成密钥对的过程中使用的数）<br> L是 p-1 与 q-1 的最小公倍数，L = lcm(p-1, q-1)</p>
</li>
<li><p>求E<br> E满足下列条件：<br> 1 &lt; E &lt; L<br> gcd(E, L)  E和L的最大公约数为1（E和L互质）    </p>
</li>
<li><p>求D<br> D满足下列条件：<br> 1 &lt; D &lt; L<br> E * D mod L = 1</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/img-rsa2.png" alt="Rsa密钥对"></p>
<blockquote>
<p>Rsa密钥对</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h3 id="4-__u5355_u5411_u6563_u5217_u51FD_u6570"><a href="#4-__u5355_u5411_u6563_u5217_u51FD_u6570" class="headerlink" title="4. 单向散列函数"></a>4. 单向散列函数</h3><h4 id="u4EC0_u4E48_u662F_u5355_u5411_u6563_u5217_u51FD_u6570"><a href="#u4EC0_u4E48_u662F_u5355_u5411_u6563_u5217_u51FD_u6570" class="headerlink" title="什么是单向散列函数"></a>什么是单向散列函数</h4><p><strong>单向散列函数</strong>（one-way hash function）有一个输入和输出，其中输入成为<strong>消息（message）</strong>，输出称为<strong>散列值（hash value）</strong>。单向散列函数可以根据消息的内容计算出散列值，而散列值就可以用来检查消息的完整性。<br>单向散列函数也称<strong>消息摘要函数（message digest function）</strong>、<strong>哈希函数</strong>、或者<strong>杂凑函数</strong>。<br>输入单向散列函数的<strong>消息</strong>也称为<strong>原像（pre-image）</strong>。<br>单向散列函数输出的<strong>散列值</strong>也称为<strong>消息摘要（message digest）</strong>或者<strong>指纹（fingerprint）</strong>   </p>
<h4 id="u5355_u5411_u6563_u5217_u51FD_u6570_u7684_u6027_u8D28"><a href="#u5355_u5411_u6563_u5217_u51FD_u6570_u7684_u6027_u8D28" class="headerlink" title="单向散列函数的性质"></a>单向散列函数的性质</h4><ul>
<li>根据任意长度的消息计算出固定长度的散列值</li>
<li>能够快速计算出散列值</li>
<li>消息不同散列值也不同（抗碰撞性）<br> 弱抗碰撞性：指要找到和该条消息具有相同散列值的另外一条消息是非常困难的。<br> 强抗碰撞性：指要找到散列值相同的两条不同的消息是非常困难的。</li>
<li>具备单向性</li>
</ul>
<h4 id="u5355_u5411_u6563_u5217_u51FD_u6570_u7684_u5B9E_u9645_u5E94_u7528"><a href="#u5355_u5411_u6563_u5217_u51FD_u6570_u7684_u5B9E_u9645_u5E94_u7528" class="headerlink" title="单向散列函数的实际应用"></a>单向散列函数的实际应用</h4><ul>
<li>检测软件是否被篡改</li>
<li>基于口令的加密（Password Based Encryption，PBE）<br> 将口令和盐（salt）混合后计算散列值。</li>
<li>消息认证码</li>
<li>数字签名</li>
<li>伪随机数生成器</li>
<li>一次性口令</li>
</ul>
<h4 id="u5355_u5411_u6563_u5217_u51FD_u6570_u7684_u5177_u4F53_u4F8B_u5B50"><a href="#u5355_u5411_u6563_u5217_u51FD_u6570_u7684_u5177_u4F53_u4F8B_u5B50" class="headerlink" title="单向散列函数的具体例子"></a>单向散列函数的具体例子</h4><ul>
<li><p><strong>MD4、MD5</strong><br> MD4是 Rivest 于1990年设计的单向散列函数，能产生128比特的散列值，随着Dobbertin提出了寻找MD4散列碰撞的方法，现在已经不安全了。<br> MD5是 Rivest 于1991年设计的单向散列函数，能产生128比特的散列值，MD5的强抗碰撞性已经被攻破，也就是说现在已经能够产生具备相同散列值的两条不同的消息，所以它也是不安全的了。    </p>
</li>
<li><p><strong>SHA-1、SHA-2、SHA-3</strong><br> SHA-1 是由 <strong>NIST</strong> 设计的一种能够产生160比特的散列值的单向散列函数。SHA-1的消息长度存在上限，这个值接近 2<sup>64</sup>比特，这个值是非常的大，所以正常使用没有问题，<br> SHA-256、SHA-384、SHA-512合称为SHA-2也都是由 <strong>NIST</strong> 设计的单向散列函数。SHA-256的上限接近于2<sup>64</sup>比特，SHA-384和SHA-512的上限接近于2<sup>128</sup>比特。<br> SHA-3 同AES一样也是NIST采用公开竞赛的方式制定单向散列函数，2012年10月NIST宣布选择Keccak算法作为SHA-3标准。<br> SHA-1的强抗碰撞性已于2005年被攻破，SHA-2还未被攻破。</p>
</li>
<li><p><strong>RIPEMD-160</strong><br> RIPEMD-160 是于1996年设计的一种能够产生160比特的散列值的单向散列函数。RIPEMD-160至今尚未被攻破。</p>
</li>
<li><p><strong>SHA-1的处理过程</strong></p>
<p> 填充成512比特的整数倍 -&gt; 计算W<sub>0</sub> ~ W<sub>79</sub> -&gt; 分组处理（512比特为一个分组） -&gt; 单步处理<br> <img src="http://7xq7um.com1.z0.glb.clouddn.com/img-sha1.png" alt="sha1的处理过程"></p>
<blockquote>
<p>SHA-1的处理过程</p>
</blockquote>
</li>
</ul>
<h3 id="5-__u6D88_u606F_u8BA4_u8BC1_u7801_uFF08MAC_uFF09"><a href="#5-__u6D88_u606F_u8BA4_u8BC1_u7801_uFF08MAC_uFF09" class="headerlink" title="5. 消息认证码（MAC）"></a>5. 消息认证码（MAC）</h3><p>消息认证码可以判断消息是否被篡改，以及判断是否有人伪装成发送者发送了该消息。</p>
<h4 id="u4EC0_u4E48_u662F_u6D88_u606F_u8BA4_u8BC1_u7801"><a href="#u4EC0_u4E48_u662F_u6D88_u606F_u8BA4_u8BC1_u7801" class="headerlink" title="什么是消息认证码"></a>什么是消息认证码</h4><p><strong>消息认证码（message authentication code）</strong> 是一种确认完整性并进行认证的技术，简称 <strong>MAC</strong>。<br>消息认证码的输入包括<strong>任意长度的消息</strong>和一个发送者与接收者之间的<strong>共享的密钥</strong>，它可以输出固定长度的数据，这个数据成为<strong>MAC值</strong>。    </p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/img-mac1.png" alt="单向散列函数与消息认证码对比"></p>
<blockquote>
<p>单向散列函数与消息认证码对比</p>
</blockquote>
<h4 id="u4F7F_u7528_u6B65_u9AA4"><a href="#u4F7F_u7528_u6B65_u9AA4" class="headerlink" title="使用步骤"></a>使用步骤</h4><p><img src="http://7xq7um.com1.z0.glb.clouddn.com/img-mac2.png" alt="消息认证码的使用步骤"></p>
<blockquote>
<p>消息认证码的使用步骤</p>
</blockquote>
<h4 id="u5E94_u7528_u5B9E_u4F8B"><a href="#u5E94_u7528_u5B9E_u4F8B" class="headerlink" title="应用实例"></a>应用实例</h4><ul>
<li><p>SWIFT<br> SWIFT的全称是 Society for Worldwide Interbank Financial Telecommunication（环球银行金融电信协会）,1973年成立的一个组织。<br> 银行与银行之间通过 SWIFT 来传递交易消息。为了确认消息的完整性以及对消息进行验证，SWIFT 使用了消息认证码。    </p>
</li>
<li><p>IPsec<br> IPsec 是对IP协议增强安全性的一种方式。在 IPsec 中，对通信内容的认证和完整性校验都采用消息认证码。</p>
</li>
<li><p>SSL/TSL<br> SSL/TSL中也使用了消息认证码。</p>
</li>
</ul>
<h4 id="u6D88_u606F_u8BA4_u8BC1_u7801_u7684_u5B9E_u73B0_u65B9_u5F0F"><a href="#u6D88_u606F_u8BA4_u8BC1_u7801_u7684_u5B9E_u73B0_u65B9_u5F0F" class="headerlink" title="消息认证码的实现方式"></a>消息认证码的实现方式</h4><ul>
<li>使用单向散列函数实现<br> 比如：HMAC， 使用SHA-1、MD5、RIPEMD-160 所构造的HMAC分别称为HMAC-MAC-1、HMAC—MD5和HMAC-RIPEMD    </li>
<li>使用分组密码实现</li>
<li>使用其他方式实现（比如公钥密码、流密码等）</li>
</ul>
<h4 id="u6D88_u606F_u8BA4_u8BC1_u7801_u65E0_u6CD5_u89E3_u51B3_u7684_u95EE_u9898"><a href="#u6D88_u606F_u8BA4_u8BC1_u7801_u65E0_u6CD5_u89E3_u51B3_u7684_u95EE_u9898" class="headerlink" title="消息认证码无法解决的问题"></a>消息认证码无法解决的问题</h4><p>对第三方证明 和 防止否认</p>
<h3 id="6-__u6570_u5B57_u7B7E_u540D"><a href="#6-__u6570_u5B57_u7B7E_u540D" class="headerlink" title="6. 数字签名"></a>6. 数字签名</h3><p>数字签名可以识别篡改和伪装还可以防止否认。</p>
<h4 id="u516C_u94A5_u5BC6_u7801_u4E8E_u6570_u5B57_u7B7E_u540D"><a href="#u516C_u94A5_u5BC6_u7801_u4E8E_u6570_u5B57_u7B7E_u540D" class="headerlink" title="公钥密码于数字签名"></a>公钥密码于数字签名</h4><p>公钥密码是用公钥加密用私钥解密，而数字签名则是用<strong>私钥加密生成签名</strong>，用<strong>公钥解密来验证签名</strong>。</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/img-sign1.png" alt="数字签名"></p>
<h4 id="u6570_u5B57_u7B7E_u540D_u7684_u65B9_u6CD5"><a href="#u6570_u5B57_u7B7E_u540D_u7684_u65B9_u6CD5" class="headerlink" title="数字签名的方法"></a>数字签名的方法</h4><ul>
<li>直接对消息签名的方法</li>
<li>对消息的散列值签名的方法</li>
</ul>
<h4 id="u6570_u5B57_u7B7E_u540D_u7684_u5E94_u7528_u5B9E_u4F8B"><a href="#u6570_u5B57_u7B7E_u540D_u7684_u5E94_u7528_u5B9E_u4F8B" class="headerlink" title="数字签名的应用实例"></a>数字签名的应用实例</h4><ul>
<li>安全信息公告</li>
<li>软件下载</li>
<li>公钥证书</li>
<li>SSL/TLS 在认证服务器身份时会使用服务器证书。</li>
</ul>
<h4 id="u6570_u5B57_u7B7E_u540D_u65E0_u6CD5_u89E3_u51B3_u7684_u95EE_u9898"><a href="#u6570_u5B57_u7B7E_u540D_u65E0_u6CD5_u89E3_u51B3_u7684_u95EE_u9898" class="headerlink" title="数字签名无法解决的问题"></a>数字签名无法解决的问题</h4><p>要正确的使用数字签名，就必须保证<strong>用于验证签名的公钥必须属于真正的发送者</strong>，所以就要保证公钥是没有问题的，这就陷入了一个死循环。<br>为了确保公钥是否合法，我们需要使用<strong>证书</strong>。就是将公钥当做一条消息，由一个可信的第三方对其签名后所得到的公钥。<br>所以，我们需要让公钥以及数字签名技术成为一种社会性的基础设施，即<strong>公钥基础设施（Public Key Infrastructure）</strong>，简称PKI。</p>
<h3 id="7-__u968F_u673A_u6570"><a href="#7-__u968F_u673A_u6570" class="headerlink" title="7. 随机数"></a>7. 随机数</h3><p>随机数是不可预测性的源泉。</p>
<h4 id="u4F7F_u7528_u968F_u673A_u6570_u7684_u5BC6_u7801_u6280_u672F"><a href="#u4F7F_u7528_u968F_u673A_u6570_u7684_u5BC6_u7801_u6280_u672F" class="headerlink" title="使用随机数的密码技术"></a>使用随机数的密码技术</h4><ul>
<li>生成密钥：用于对称密码和消息认证码。</li>
<li>生成密钥对：用于公钥密码和数字签名。</li>
<li>生成初始向量（IV）：用于分组密码的CBC、CFB、和OFB模式。</li>
<li>生成 nonce：用于防御<a href="http://baike.baidu.com/link?url=_9tT5EDa6nJFthBNFmpOlOXgrW9zZIAC8duNKMC_UlSxdxsQeJAX-n6MmjufROX3j9-RjhbGcX6eklYCRlsQCK" target="_blank" rel="external">重放攻击</a>以及分组密码的CTR模式等。</li>
<li>生成盐：用于基于口令的密码（PBE）等。</li>
</ul>
<h4 id="u968F_u673A_u6570_u7684_u6027_u8D28"><a href="#u968F_u673A_u6570_u7684_u6027_u8D28" class="headerlink" title="随机数的性质"></a>随机数的性质</h4><ul>
<li>随机性：就是看起来杂乱无章，没有规律。</li>
<li>不可预测行：指在知道过去的伪随机数的情况下，依然不能预测出下一个伪随机数。</li>
<li>不可重现性：指无法重现和某一个随机数列完全相同的数列的性质。</li>
</ul>
<h4 id="u4F2A_u968F_u673A_u6570_u751F_u6210_u5668"><a href="#u4F2A_u968F_u673A_u6570_u751F_u6210_u5668" class="headerlink" title="伪随机数生成器"></a>伪随机数生成器</h4>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-__u5BC6_u7801_u5B66_u5BB6_u7684_u5DE5_u5177_u7BB1"><a href="#1-__u5BC6_u7801_u5B66_u5BB6_u7684_u5DE5_u5177_u7BB1" class="headerlink" title="1. 密码学家的工具箱"></a>1. 密码学家的工具箱</h3><ul>
<li>对称密码</li>
<li>公钥密码</li>
<li>单向散列函数</li>
<li>消息认证码</li>
<li>数字签名</li>
<li>伪随机数生成器</li>
</ul>
<blockquote>
<p>出自《网络信息安全的真相》一书</p>
</blockquote>
<h3 id="2-__u5BC6_u7801_u4E0E_u4FE1_u606F_u5B89_u5168_u5E38_u8BC6"><a href="#2-__u5BC6_u7801_u4E0E_u4FE1_u606F_u5B89_u5168_u5E38_u8BC6" class="headerlink" title="2. 密码与信息安全常识"></a>2. 密码与信息安全常识</h3><ul>
<li>不要使用保密的密码算法</li>
<li>使用低强度的密码比不进行任何加密更加危险</li>
<li>任何密码总有一天会被破解</li>
<li>密码只是信息安全的一部分</li>
</ul>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://dabeen.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="http://dabeen.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[翻译 Composers and Audiences]]></title>
    <link href="http://dabeen.me/2016/07/22/Composers-and-audiences/"/>
    <id>http://dabeen.me/2016/07/22/Composers-and-audiences/</id>
    <published>2016-07-21T16:00:00.000Z</published>
    <updated>2016-09-22T17:55:06.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Composers_and_audiences"><a href="#Composers_and_audiences" class="headerlink" title="Composers and audiences"></a>Composers and audiences</h3><h3 id="u4F5C_u66F2_u5BB6_u4E0E_u542C_u4F17"><a href="#u4F5C_u66F2_u5BB6_u4E0E_u542C_u4F17" class="headerlink" title="作曲家与听众"></a>作曲家与听众</h3><p><em>JANUARY 25, 2016 BY NOLAN LAWSON</em></p>
<p>原文：<a href="http://www.pocketjavascript.com/blog/2016/1/25/composers-and-audiences" target="_blank" rel="external">Composers and audiences</a></p>
<p>(Yes, this post is about JavaScript. Please indulge the analogy for a bit.)</p>
<p>(没错，这篇文章是关于 JavaScript 的，在这个比喻里 YY 一会吧。)</p>
<p>Imagine yourself as a young court composer in the 18th century. You’ve just arrived in Vienna, fresh from the academy, with one goal in mind: to improve your craft, and to learn from the old masters. You’ve heard the stunning operas of Mozart, the ponderous fugues of Bach, and you’ve dreamed of wowing audiences with your own contributions to this storied art form.</p>
<p>想象一下自己是一个十八世纪的年轻宫廷作曲家。你刚刚从学校里出来到维也纳，心里有一个目标：向前辈大师们学习，提高你的技艺。你听过莫扎特的令人震撼的歌剧，巴赫沉重的赋格曲，也梦想着用这种传奇的艺术形式来征服你的听众。</p>
<p><img src="http://static1.squarespace.com/static/54d00072e4b0c38f7e184ee0/t/56a4f8fb0e4c11b9a8d56ae8/1453652240999/https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%253AAdolph_Menzel_-_Fl%25C3%25B6tenkonzert_Friedrichs_des_Gro%25C3%259Fen_in_Sanssouci_-_Google_Art_Project.jpg?format=1500w" alt="Source: Wikimedia Commons"><br>Source: Wikimedia Commons<br><a id="more"></a></p>
<p>You’re excited by recent advances to improve the sonority of instruments – after all, the violin’s <a href="https://en.wikipedia.org/wiki/F-hole" target="_blank" rel="external">F-hole</a> was only perfected in your lifetime. You’re also intrigued by the strange note systems described by explorers to the Far Orient, completely unlike the 12-note chromatic scale you learned in school. You’ve even heard of the complex rhythms practiced in Africa, far more intricate than the lock-step percussion of standard European fare.</p>
<p>你对近期在乐器响度上的进展感到激动——毕竟小提琴的<a href="https://en.wikipedia.org/wiki/F-hole" target="_blank" rel="external">音孔</a>在你那个年代才刚刚完善。你还被探索者们所描述的来自远东的陌生记谱法深深吸引，它们完全不像你在学校所学的12个音符音阶。你甚至还听过非洲鼓复杂的韵律，要远远的复杂于欧洲标准锁步打击乐器。</p>
<p>So your first day on the job, you approach your <a href="https://en.wikipedia.org/wiki/Kapellmeister" target="_blank" rel="external">Kapellmeister</a> and excitedly ask: what new techniques are being developed in the court of today? What musical innovations will amaze and delight opera-goers in the coming years?</p>
<p>于是在你上班的第一天，你靠近乐队的<a href="https://en.wikipedia.org/wiki/Kapellmeister" target="_blank" rel="external">乐长</a>，兴奋地问：“现在宫廷正在发展什么样的新技术？什么样的音乐创新才会在未来几年震惊的歌剧爱好者们呢？”</p>
<p>The master sighs and places a hand on your shoulder. The landscape of modern composition, he explains, is an arduous one. The raging debate among composers today is on the proper use of sheet music.</p>
<p>大师叹了口气，把一只手搭在你的肩膀上，解释道：“现代作曲是非常艰巨的一件事情，当今作曲家们之间争论最激烈的就是如何适当的使用乐谱。”</p>
<p>“You see,” he says, “we realized some time ago that annotations like <em>Pizzicato</em> and <em>Allegro</em> are too difficult for non-Italian speakers to understand. Furthermore, they clutter up the page, and they take too much time for the musicians to sight-read. So we are gradually replacing them with symbols that explain the same concept.”</p>
<p>“你看”，他说，“不久前我们意识到对于不懂意大利语的人来说，像 <em>播奏（Pizzicato）</em> 与 <em>快板（Allegro）</em> 这样的注解理解起来是比较困难的。此外，它们把页面弄得杂乱，它们让音乐家们在视奏的时候耗费了太多的时间。因此，我们正逐步用表达同样概念的符号来代替它们。”</p>
<p><img src="http://static1.squarespace.com/static/54d00072e4b0c38f7e184ee0/t/56a65cc022482eb87f63ae40/1453743303935/?format=1500w" alt=""></p>
<p>“Ah,” you say, a bit surprised at the dull subject matter. “That does make sense. Musicians should be able to perform at their peak potential, in order to better please audiences.”</p>
<p>“啊”，你说，对于如此平淡的主题你有点吃惊。“这确实很有意义。为了能够更好的取悦听众，音乐家应该使用他们最大的潜能来演绎。”</p>
<p>“Yes yes,” the master waves his hand dismissively. “But unfortunately this creates an additional problem, which is that our existing scores need to be laboriously migrated over to the new system. Furthermore, not all composers agree on which system to use, so there are many competing and incompatible standards.”</p>
<p>“是呀，是呀”，大师轻蔑地挥动着他的手。“但是这又很不幸的带来了一个额外的问题，我们需要把现有的曲谱费力的迁移到新的系统中。此外，并非所有的作曲家都能认同同一体系，因此存在很多竞争与不兼容的标准。”</p>
<p>“That would certainly create problems for the musicians!” you admit. “And the composers as well.”</p>
<p>“那势必会给音乐家以及作曲家们创造麻烦！” 你认同地说。</p>
<p>“Indeed,” the master says. “It also causes headaches with the newly-invented musical typewriter. Every year, there are updates to the typewriter design, and every year composers need to learn the new system, or hold steadfastly to their familiar one.” He shakes his head. “As a community, we are suffering from tool fatigue.”</p>
<p>“的确”，大师说。“同时你也会因为这新发明的谱曲器而感到头痛。每年，随着谱曲器的设计更新，作曲家要么就是去熟悉新设计的谱曲系统，要么就是坚持自己所熟悉的一个”，他摇摇头说。作为一个社会群体，我们正遭受着工具疲劳。</p>
<p>“But what about the music?” you say impatiently, despite yourself. “All of this is well and good for composers, but how are we improving the experience for audiences? They don’t care a bit how we create the music, only how it sounds.”</p>
<p>“那音乐呢？” 尽管只有你自己，你还是迫不及待的问到。“对于作曲家来说这一切都很好，但是我们如何才能提高听众的体验呢？他们一点都不关心我们是怎么创造的音乐，只关心音乐听起来的样子。”</p>
<p>“My child,” the master says with a smile, “you have much to learn. The more efficiently we can create our music, the better it will be in the end for audiences. The most important thing is to learn the purest system for note-writing, which I will deign to teach you. Here, let me show you my typewriter, which is of course the most advanced on the market today…”</p>
<p>“孩子啊，”大师笑着说，“你还有太多东西要学。我们越是能高效地创造出音乐，最后呈现给听众的就越好。最重要的事情是学习最纯粹的系统来记谱，我这就屈尊教你。来来来，我给你看看我的谱曲器，它毫无疑问是当前市场上最为先进的一款…” </p>
<h4 id="Composing_JavaScript"><a href="#Composing_JavaScript" class="headerlink" title="Composing JavaScript"></a>Composing JavaScript</h4><h4 id="u5199JavaScript"><a href="#u5199JavaScript" class="headerlink" title="写JavaScript"></a>写JavaScript</h4><p>The analogy is a bit labored, but this is how I feel about web development today.</p>
<p>这个类比虽然有点不恰当，但是这正是当前 web 开发给我的感觉。</p>
<p>Every day, I’m bombarded by tweets and articles touting one framework over another, always in terms of the tooling and the developer experience, with little regard for the user experience. From reading Hacker News or EchoJS, you’d think the most important parts of JavaScript were the tools, patterns, and philosophies. The fact that someone, somewhere, is actually interacting with pixels on a screen feels like a side effect.</p>
<p>每天，我们都被微博和文章里所吹捧的一个又一个的框架所轰炸。它们的关注点总是在开发工具的条款以及开发经验上，很少关注用户体验。通过阅读 Hacker News 或者 EchoJS，你会觉得 JavaScript 中最重要的部分是工具、模式、以及思想。而某人在某处与屏幕上的像素点交互的事实却不那么重要。</p>
<p>Of course, <a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4" target="_blank" rel="external">tool fatigue</a> is a well-worn topic, but I’m not just talking about that. I’m also talking about the endless discussion – especially in vogue in the React/Redux community – about “action creators” and “subreducers” and “sagas” and abstractions that are so complex you need <a href="https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6" target="_blank" rel="external">a cartoon version</a> to understand it. All of this mental overhead is deemed necessary to keep our app code from growing into an unreadable spaghetti mess (or so it’s argued). <a href="/#footnotes">[1]</a></p>
<p>当然，<a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4" target="_blank" rel="external">工具疲劳</a>是一个老生常谈的话题，但是我要讨论的不只是这个。还有那些尤其是在当前流行的 React/Redux 社区中关于 “action creators”、“subreducers” 和 “sagas” 的无休止的讨论，这些抽象概念太复杂了，你需要一个<a href="https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6" target="_blank" rel="external">卡通版本</a>来理解他们。花费精力去避免我们的应用代码变成意大利面条一样不可读是有必要的（或者这才是争执点）。<a href="/#footnotes">[1]</a></p>
<p>Then of course, there are the competitor frameworks that <a href="http://staltz.com/why-react-redux-is-an-inferior-paradigm.html" target="_blank" rel="external">boast about their own ideological purity</a> compared to the prevailing model. The more I read, the more it starts to sound like a game of intellectual one-upmanship: “Oh, I only use <em>immutable data</em>.””“”” “””””Oh, I only use <em>pure functions.</em>“ “Oh, I only use <em>organic shade-grown npm modules</em> .” With all this highfalutin terminology, I can’t tell sometimes if I’m reading about a JavaScript framework or the latest juice cleanse.</p>
<p>当然，有的框架竞争者<a href="http://staltz.com/why-react-redux-is-an-inferior-paradigm.html" target="_blank" rel="external">宣扬他们的思想相比当前流行的模型更加的纯粹</a>。我读的越多，就越开始听起来像是一个谁的知识胜人一筹的游戏：“噢，我只使用 <em>不可变的数据（immutable data）</em>”、“噢，我只使用 <em>纯函数（pure functions）</em>”、“噢，我只使用 <em>树荫下种植的有机 npm 模块</em> ”。由于这些冠冕堂皇的术语，有时我都分辨不出阅读的是关于 JavaScript 框架还是最新的排毒果汁。</p>
<h4 id="Forgetting_about_the_user"><a href="#Forgetting_about_the_user" class="headerlink" title="Forgetting about the user"></a>Forgetting about the user</h4><h4 id="u5FD8_u8BB0_u7528_u6237"><a href="#u5FD8_u8BB0_u7528_u6237" class="headerlink" title="忘记用户"></a>忘记用户</h4><p>Of course, tools and patterns are important, and we should be talking about them. Especially when working with junior developers, it’s good to enforce best practices and teach difficult concepts. None of this discussion would bug me, except that it seems like the experience of the users (you know, those weird non-programmers who actually use your app) is getting lost in the shuffle.</p>
<p>当然，工具和模式是非常重要的，我们应该谈论它们。尤其是和初级开发者合作时，强制执行最佳实践并且给他们讲解晦涩的概念是很有帮助的。这样的探讨我一点都不觉得有问题，除了用户（真正使用你产品的那些古怪的非程序员，你懂的）的体验慢慢地被遗忘了。</p>
<p>Paul Lewis has already written about this in <a href="https://aerotwist.com/blog/the-cost-of-frameworks/" target="_blank" rel="external">“The Cost of Frameworks,”</a> but it bears repeating. Your user does not give a damn how you built your app; they only care that 1) it works, and 2) it works quickly. I’m disappointed that so much of this topic gets shoved under the umbrella of “performance,” and that we have to hammer home the point that <a href="https://twitter.com/search?q=%23perfmatters" target="_blank" rel="external">“perf matters”</a>, because in fact “performance” is just the closest translation we have in developer-speak to what users would call “good experience.” <a href="/#footnotes">[2]</a></p>
<p>Paul Lewis 已经在《<a href="https://aerotwist.com/blog/the-cost-of-frameworks/" target="_blank" rel="external">The Cost of Frameworks</a>》中写过这个，但值得反复的强调。用户一点也不关心你是怎么构建应用的，他们只关注：1）能用，2）流畅。我为大量主题被归类到“性能”下感到失望，导致我们不得不极力让大家明白<a href="https://twitter.com/search?q=%23perfmatters" target="_blank" rel="external">“性能很重要”</a>这个观点，实际上，“性能”只是开发者对用户口中“体验好” 最接近的翻译。<a href="/#footnotes">[2]</a></p>
<p>I spend a lot of time harping on performance – in my work at Squarespace, at JavaScript meetups, and in my blog – and it never ceases to amaze me that “performance” is such a dark art to so many developers. The truth is that you can discover most performance problems by simply testing on slower hardware.</p>
<p>我在 Squarespace 的工作中、JavaScript 的聚会上、博客里，花了很多的时间来讨论性能。我一次又一次惊讶地发现，“性能”对于很多开发者来说竟还是作为一种黑魔法而存在。事实上在一些老旧的硬件设备上做一些简单的测试，就可以发现大部分的性能问题。</p>
<p>For instance, I’m shocked at how many developers (newbies and experts alike) are still using CSS top and left rather than transform to animate movement, even though the framerate difference is <a href="https://youtu.be/zrkCr1FThn0" target="_blank" rel="external">crystal-clear</a> once you test on something other than an 8-core MacBook Pro. (My personal favorite workhorses are a janky 2011-era <a href="http://amzn.com/B005ZEF01A" target="_blank" rel="external">Galaxy Nexus</a> and a cheap <a href="http://amzn.com/B00P6FM23W" target="_blank" rel="external">Acer laptop</a>.)</p>
<p>例如，我对很多开发者（不管新手还是老手）仍然使用 CSS 的 top 和 left 而不是 transform 创建平移动画感到震惊，尽管只要你在除了 8 核 MacBook Pro 之外的设备上进行过测试，就会发现帧率的差别极其明显。（我个人喜欢的机器是难用的2011年产的 <a href="http://amzn.com/B005ZEF01A" target="_blank" rel="external">Galaxy Nexus</a> 和一台便宜的 <a href="http://amzn.com/B00P6FM23W" target="_blank" rel="external">Acer 笔记本</a>）</p>
<p>Note that I’m not saying newbies should feel guilty for making this mistake; top/left is much more intuitive than transform. However, that’s exactly why we (the experts) should be making an effort to learn and pass on these sorts of optimization techniques to them, rather than the petty minutia of the framework-of-the-week.</p>
<p>我说这些的不是要让新手要为这个错误而内疚；top/left 比 transform 更加的直观。然而，这正是我们（老手）应该努力学习并推广此类优化技术而不是本周最佳框架中的微小细节给他们的原因。</p>
<h4 id="A_lost_art"><a href="#A_lost_art" class="headerlink" title="A lost art"></a>A lost art</h4><h4 id="u8FF7_u5931_u7684_u827A_u672F"><a href="#u8FF7_u5931_u7684_u827A_u672F" class="headerlink" title="迷失的艺术"></a>迷失的艺术</h4><p>It’d be understandable if performance tricks like transform were arcane due to their novelty, but a lot of it is well-established stuff that seems to be willfully ignored. For instance, offline tools like IndexedDB, WebSQL, and AppCache have been around for years (<a href="https://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/comment-page-1/" target="_blank" rel="external">2010</a>, <a href="https://webkit.org/blog/126/webkit-does-html5-client-side-database-storage/" target="_blank" rel="external">2007</a>, and <a href="http://googlecode.blogspot.com/2009/04/gmail-for-mobile-html5-series-using.html" target="_blank" rel="external">2009</a> respectively), yet most web developers I talk to are barely aware of them. The same goes for WebWorkers, which have made parallelism possible <a href="http://www.html5rocks.com/en/tutorials/workers/basics/" target="_blank" rel="external">since 2010</a>, though you wouldn’t know it from browsing most web sites.</p>
<p>像 transform 这种性能优化技巧由于比较新颖而显得神秘是可以理解的，但是很多行之有效的东西却似乎被故意忽略了。比如，像 IndexedDB、WebSQL 和 AppCache 这种离线缓存工具（发布时间分别是<a href="https://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/comment-page-1/" target="_blank" rel="external">2010</a>, <a href="https://webkit.org/blog/126/webkit-does-html5-client-side-database-storage/" target="_blank" rel="external">2007</a>以及<a href="http://googlecode.blogspot.com/2009/04/gmail-for-mobile-html5-series-using.html" target="_blank" rel="external">2009</a>），虽然已经发布多年了，但是和我聊过的大多数 web 开发者几乎都不了解它们。同样，<a href="http://www.html5rocks.com/en/tutorials/workers/basics/" target="_blank" rel="external">2010</a>年发布的 WebWorkers 使并行成为了可能，可是你在大部分网站上都找不到关于它的内容。</p>
<p>These are technologies that can vastly improve the user experience of your webapp, either by reducing server round-trips (offline) or increasing UI responsiveness (parallelism). And yet it feels like many of us are more eager to learn about some hot new framework that improves our own developer experience, rather than existing technologies that empower users.</p>
<p>这些新技术可以通过减少服务器的往返次数（离线）或者提高UI的响应速度（并行）的方式来大大的提高你的网络应用程序的用户体验。然而看起来我们中的许多人更热衷于学习一些新的框架来提高自己的开发体验，而不是学习使用现有的技术赋予用户更好的体验。</p>
<p>If I sound bitter about the lack of progress in these areas, it’s because I am. Just last week I published <a href="https://www.npmjs.com/package/pseudo-worker" target="_blank" rel="external">pseudo-worker</a>, a WebWorker polyfill, because I could not find a decent one anywhere on npm or Github. (Yes, for WebWorkers: a six-year-old technology!) I’ve also spent the last few years working on <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> and related IndexedDB/WebSQL projects, and the most surprising part of my experience has been realizing just how little work is being done in this field. Often I find myself <a href="https://gist.github.com/nolanlawson/11672431f0d219b96335" target="_blank" rel="external">filing bugs on browsers</a> for implementation flaws that should have been uncovered years ago, if people were actually using this stuff.</p>
<p>我的确对这些领域缺乏进展而感到痛苦。就在上周我发布了 <a href="https://www.npmjs.com/package/pseudo-worker" target="_blank" rel="external">pseudo-worker</a>——WebWorker 的 polyfill, 因为找遍了 npm 和 Github 都没有找到一个合适的（嗯，WebWorkers：一项六岁的技术）。同时我过去几年参与 <a href="http://pouchdb.com/" target="_blank" rel="external">PouchDB</a> 和相关的 IndexedDB/WebSQL 项目，在这些经历中最令我意外的的部分是我意识到在这个领域的工作太少了。<a href="https://gist.github.com/nolanlawson/11672431f0d219b96335" target="_blank" rel="external">我常常为一些实现上的缺陷给浏览器提 bug</a>。而如果真有人在使用这些的东西的话，这些 bug 在几年前就应该就被发现了。</p>
<p>I keep waiting for web developers to “discover” these techniques (as <a href="http://adaptivepath.org/ideas/ajax-new-approach-web-applications/" target="_blank" rel="external">Ajax was “discovered”</a> in 2005), but I barely heard a peep from the blogosphere this year, except in my own niche circles. Instead, one of the most heralded web technologies of 2015 was <a href="http://gaearon.github.io/react-hot-loader/" target="_blank" rel="external">hot loading</a>, a tool that allows you to ignore the slow loading time of your app in order to increase your own developer efficiency. If there’s a better example of a tool that privileges developers at the expense of users, I can’t think of one.</p>
<p>我一直在等待 web 开发者“发现”这些技术（就像2005年“发现” <a href="http://adaptivepath.org/ideas/ajax-new-approach-web-applications/" target="_blank" rel="external">Ajax</a> 一样），但是我几乎不能在博客圈子中听到一丁点，除了在我自己的小圈子里。相反，在2015年其中一个最受欢迎的网络技术却是 <a href="http://gaearon.github.io/react-hot-loader/" target="_blank" rel="external">热加载</a>, 它是一种可以帮你省去你的app缓慢的加载时间，来提高你的开发效率的工具。一个工具好到开发者牺牲用户也要使用，我想不到这样的例子。</p>
<h4 id="Looking_forward"><a href="#Looking_forward" class="headerlink" title="Looking forward"></a>Looking forward</h4><h4 id="u5C55_u671B"><a href="#u5C55_u671B" class="headerlink" title="展望"></a>展望</h4><p>There’s still hope that we can reverse this trend. I am encouraged by the burgeoning excitement over <a href="https://ponyfoo.com/articles/serviceworker-revolution" target="_blank" rel="external">ServiceWorkers</a>, and the fact that my “<a href="http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org" target="_blank" rel="external">Introducing Pokedex.org</a>“ post actually drew some attention to the potential of <a href="https://medium.com/@slightlylate/progressive-apps-escaping-tabs-without-losing-our-soul-3b93a8561955" target="_blank" rel="external">progressive webapps</a>. I’m even more excited that Malte Ubl, the head of the <a href="https://www.ampproject.org/" target="_blank" rel="external">AMP project</a> at Google, has declared 2016 to be <a href="https://medium.com/@cramforce/2016-will-be-the-year-of-concurrency-on-the-web-c39b1e99b30f" target="_blank" rel="external">the year of concurrency on the web</a>.</p>
<p>我们还是有希望来扭转这一趋势的。我被 <a href="https://ponyfoo.com/articles/serviceworker-revolution" target="_blank" rel="external">ServiceWorkers</a> 所取得的令人激动的进展所鼓舞，事实上在我的文章 “<a href="http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org" target="_blank" rel="external">Introducing Pokedex.org</a>” 中就对 <a href="https://medium.com/@slightlylate/progressive-apps-escaping-tabs-without-losing-our-soul-3b93a8561955" target="_blank" rel="external">progressive webapps</a> 的潜在能力进行了关注。还有更加令我激动是 Malte Ubl（谷歌 APM 项目的负责人）已经宣布2016年将会成为 <a href="https://medium.com/@cramforce/2016-will-be-the-year-of-concurrency-on-the-web-c39b1e99b30f" target="_blank" rel="external">web 的并发年</a>。</p>
<p>These are all efforts to improve the experience of web users, even if they add a bit of complexity to our app code and build processes. And in fact, the two aren’t mutually exclusive; we can build tools that help both developers and users – projects like <a href="http://hood.ie/" target="_blank" rel="external">Hoodie</a> and <a href="https://www.talater.com/upup/" target="_blank" rel="external">UpUp</a> are making great strides in this area. I also love the performance feats that React and Ember (especially <a href="http://emberjs.com/blog/2015/05/05/glimmer-merging.html" target="_blank" rel="external">Glimmer</a>) have managed to pull off, which are being pushed even further by <a href="https://docs.google.com/document/d/1M9FmT05Q6qpsjgvH1XvCm840yn2eWEg0PMskSQz7k4E" target="_blank" rel="external">Angular 2</a>.</p>
<p>这些努力提高了 web 用户的体验，即使它们增加了一点点我们程序代码与构建流程的复杂性。事实上，这两者并不互相排斥；我们可以创造工具同时帮助开发者和用户，<a href="http://hood.ie/" target="_blank" rel="external">Hoodie</a> 和 <a href="https://www.talater.com/upup/" target="_blank" rel="external">UpUp</a> 项目正在这方面大踏步的前进，我也很喜欢 React 和 Ember (尤其是 <a href="http://emberjs.com/blog/2015/05/05/glimmer-merging.html" target="_blank" rel="external">Glimmer</a>) 成功在性能上取得的成绩，<a href="https://docs.google.com/document/d/1M9FmT05Q6qpsjgvH1XvCm840yn2eWEg0PMskSQz7k4E" target="_blank" rel="external">Angular 2</a> 又将其推进到了新的高度。</p>
<p>Some of these problems, though, can only be improved with education. Developers need to make more of an effort to learn the web platform itself, and not rely on some framework’s abstraction of it. Luckily, there are plenty of folks doing great work to increase developer awareness around topics of performance and user experience, and to show what the web is capable of today: <a href="https://youtu.be/obtCN3Goaw4?list=PLNYkxOF6rcIBz9ACEQRmO9Lw8PW7vn0lr" target="_blank" rel="external">Paul Lewis</a>, <a href="https://youtu.be/GxOq1bnlZXk" target="_blank" rel="external">Rachel Nabors</a>, <a href="https://youtu.be/puOrC7cfjRI" target="_blank" rel="external">Tom Dale</a>, <a href="https://youtu.be/Kz_zKXiNGSE" target="_blank" rel="external">Jason Teplitz</a>, and <a href="https://youtu.be/okk0BGV9oY0" target="_blank" rel="external">Henrik Joreteg</a> are some names that spring to mind. (All of the above links are videos, and all of them are worth watching!)</p>
<p>然而，这些问题只能通过教育来提高。开发者需要更努力的学习 web 平台本身，而不是某种框架对其的抽象。幸运的是有很多人做了伟大的工作来提高开发人员对性能和用户体验的关注，并且展示了当今 web 的能力：<a href="https://youtu.be/obtCN3Goaw4?list=PLNYkxOF6rcIBz9ACEQRmO9Lw8PW7vn0lr" target="_blank" rel="external">Paul Lewis</a>, <a href="https://youtu.be/GxOq1bnlZXk" target="_blank" rel="external">Rachel Nabors</a>, <a href="https://youtu.be/puOrC7cfjRI" target="_blank" rel="external">Tom Dale</a>, <a href="https://youtu.be/Kz_zKXiNGSE" target="_blank" rel="external">Jason Teplitz</a>, 还有 <a href="https://youtu.be/okk0BGV9oY0" target="_blank" rel="external">Henrik Joreteg</a>是我心里想到的名字。（这些链接都是视频，值得关注！）</p>
<p>Overall, I’m hoping that web developers in 2016 will spend a bit less time navel-gazing over our processes, philosophies, and abstractions. These things are important for the day-to-day task of building and maintaining code, but they shouldn’t distract us from the needs of the people we ultimately serve: the users.</p>
<p>总体来说，在2016年，我希望 web 开发者们能够少花一些时间在钻研流程、原理、以及抽象化上。这些东西对于日常构建和维护代码是很重要，但不能因此转移我们对最终服务用户的需求的关注。</p>
<h4 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h4><h4 id="u811A_u6CE8"><a href="#u811A_u6CE8" class="headerlink" title="脚注"></a>脚注</h4><blockquote>
<p>[1] I meant no offense to Dan Abramov, Lin Clark, André Staltz, or anybody else trying to make our applications’ wiring easier to manage. This stuff is hard-hitting, computer-sciency work, and fun to think about! It’s just not the whole story, which is why I wrote this piece.</p>
<p>[1] 我没有冒犯 Dan Abramov, Lin Clark, André Staltz, 或者其他尝试使应用程序的复杂逻辑更易于管理的人。这些是很给力的计算机科学成果和有趣的思考！并非完全如此，特此说明。</p>
<p>[2] “Design” is another good translation, although I think design and performance are inextricably linked (e.g. 60FPS animations, smooth transitions between related screens, etc.).</p>
<p>[2] “设计” 是另一个不错的翻译，虽然我认为设计和性能有着千丝万缕的联系（例如：60fps 的动画，在相关的画面间平滑的过渡，等）。</p>
</blockquote>
<p>Thanks to Nick Colley, Jan Lehnardt, André Miranda, and Garren Smith for feedback on a draft of this blog post.</p>
<p>感谢 Nick Colley, Jan Lehnardt, André Miranda, 和 Garren Smith 对本篇博文的草稿的意见反馈。</p>
<h4 id="Update_26/Jan/2016"><a href="#Update_26/Jan/2016" class="headerlink" title="Update 26/Jan/2016"></a>Update 26/Jan/2016</h4><h4 id="26/01/2016__u66F4_u65B0"><a href="#26/01/2016__u66F4_u65B0" class="headerlink" title="26/01/2016 更新"></a>26/01/2016 更新</h4><p>I was super harsh on React, Redux, and Cycle.js folks in this post, and got <a href="https://twitter.com/dan_abramov/status/691976015594311680" target="_blank" rel="external">rightfully called out for it</a>. So I should clarify: I know plenty of folks in those communities do care about performance, and that the end-user experience <a href="https://medium.com/swlh/the-case-for-flux-379b7d1982c6" target="_blank" rel="external">motivated a lot of these tools in the first place</a>.</p>
<p>我在这篇文章中对 React, Redux, 还有 Cycle.js 的小伙伴们非常的严厉，<a href="https://twitter.com/dan_abramov/status/691976015594311680" target="_blank" rel="external">并且直接的表达了出来</a>。因此我应该澄清一下：我知道这些社区中的很多小伙伴还是很关心性能的，而且从一开始，最终用户体验也<a href="https://medium.com/swlh/the-case-for-flux-379b7d1982c6" target="_blank" rel="external">激发了很多的这样的工具</a>。</p>
<p>React pioneered things like isomorphic rendering, which is absolutely huge for performance. Webpack made code-splitting easier. All of these things are awesome! I even think hot-loading is nifty. (As long as you’re still sure to test the actual load time of your app.)</p>
<p>React 开拓了一些事情，比如同构渲染，这对性能来说影响绝对是巨大的。Webpack 使得代码切分变得容易。所有的这些事情都是非常棒的！我甚至觉得热加载很潮（只要你还会测试应用的实际加载时间）。</p>
<p>We all want to write great software. That’s why we got into this business in the first place. My point was just that I don’t feel like I’m hearing nearly enough discussions about the capabilities of the web platform, and how webapps can be pushed in interesting directions.</p>
<p>我们都想写出出色的软件。这是我们进入这个行业的初衷。我的意思是，我没听到一点关于 web 平台的能力，以及如何把 webapp 往有趣的方向推进的讨论。</p>
<p>It sometimes feels like we’ve concluded there are no more worlds to conquer, and that we just need to figure out how to perfect the process of writing websites as they were written in ~2012. That would be a shame. There are some wild possibilities in the web today (not just around offline and parallelism; Jenn Simmons has <a href="https://youtu.be/ZNpn7FBp_9U" target="_blank" rel="external">an awesome talk</a> about CSS layouts that nobody’s using). I just don’t want our tools and abstractions to distract us from that.</p>
<p>有时感觉我们已经断定没有需要征服的疆域了，只需要弄清楚如何完善编写网站的程序，就像他们在2012年左右写的那样。那将是一种耻辱。今天 web 还存在荒漠（不只是前文中的离线与并行；Jenn Simmons 有<a href="https://youtu.be/ZNpn7FBp_9U" target="_blank" rel="external">一个非常棒的关于 CSS 布局的话题</a>，但是没有人这么用）。我只是不想让工具和抽象分散了注意力。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Composers_and_audiences"><a href="#Composers_and_audiences" class="headerlink" title="Composers and audiences"></a>Composers and audiences</h3><h3 id="u4F5C_u66F2_u5BB6_u4E0E_u542C_u4F17"><a href="#u4F5C_u66F2_u5BB6_u4E0E_u542C_u4F17" class="headerlink" title="作曲家与听众"></a>作曲家与听众</h3><p><em>JANUARY 25, 2016 BY NOLAN LAWSON</em></p>
<p>原文：<a href="http://www.pocketjavascript.com/blog/2016/1/25/composers-and-audiences">Composers and audiences</a></p>
<p>(Yes, this post is about JavaScript. Please indulge the analogy for a bit.)</p>
<p>(没错，这篇文章是关于 JavaScript 的，在这个比喻里 YY 一会吧。)</p>
<p>Imagine yourself as a young court composer in the 18th century. You’ve just arrived in Vienna, fresh from the academy, with one goal in mind: to improve your craft, and to learn from the old masters. You’ve heard the stunning operas of Mozart, the ponderous fugues of Bach, and you’ve dreamed of wowing audiences with your own contributions to this storied art form.</p>
<p>想象一下自己是一个十八世纪的年轻宫廷作曲家。你刚刚从学校里出来到维也纳，心里有一个目标：向前辈大师们学习，提高你的技艺。你听过莫扎特的令人震撼的歌剧，巴赫沉重的赋格曲，也梦想着用这种传奇的艺术形式来征服你的听众。</p>
<p><img src="http://static1.squarespace.com/static/54d00072e4b0c38f7e184ee0/t/56a4f8fb0e4c11b9a8d56ae8/1453652240999/https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%253AAdolph_Menzel_-_Fl%25C3%25B6tenkonzert_Friedrichs_des_Gro%25C3%259Fen_in_Sanssouci_-_Google_Art_Project.jpg?format=1500w" alt="Source: Wikimedia Commons"><br>Source: Wikimedia Commons<br>]]>
    
    </summary>
    
      <category term="翻译" scheme="http://dabeen.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://dabeen.me/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[翻译 Autoloading Standard [PSR-0]]]></title>
    <link href="http://dabeen.me/2016/02/29/%E7%BF%BB%E8%AF%91%EF%BC%9AAutoloading%20Standard%5BPSR-0%5D/"/>
    <id>http://dabeen.me/2016/02/29/翻译：Autoloading Standard[PSR-0]/</id>
    <published>2016-02-28T16:00:00.000Z</published>
    <updated>2016-02-29T06:16:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u8BD1_u6587_uFF1A"><a href="#u8BD1_u6587_uFF1A" class="headerlink" title="译文："></a>译文：</h2><h1 id="u81EA_u52A8_u52A0_u8F7D_u6807_u51C6"><a href="#u81EA_u52A8_u52A0_u8F7D_u6807_u51C6" class="headerlink" title="自动加载标准"></a>自动加载标准</h1><blockquote>
<p><strong>已过时</strong> - PSR-0 已经在2014-10-21日被弃用。 推荐使用<a href="http://www.php-fig.org/psr/psr-4/" target="_blank" rel="external">PSR-4</a>。</p>
</blockquote>
<p>下面介绍了使autoloader具有互操作性所必须遵守的条件。</p>
<a id="more"></a>
<h2 id="u5FC5_u8981_u6761_u4EF6"><a href="#u5FC5_u8981_u6761_u4EF6" class="headerlink" title="必要条件"></a>必要条件 </h2><ul>
<li>一个完整有效的 <code>命名空间</code> 和 <code>类</code> 必须遵循以下结构： <code>\&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*&lt;Class Name&gt;</code></li>
<li>每个 <code>命名空间</code> 必须包含一个顶级的 <code>命名空间（&quot;Vendor Name&quot;）</code></li>
<li>每个 <code>命名空间</code> 可以拥有任意多个 <code>子命名空间</code></li>
<li>当从文件系统中加载文档时，每一个命名空间中的 <code>分隔符（separator）</code> 都要被转换为<code>DIRECTORY_SEPARATOR</code></li>
<li>所有的 <code>CLASS NAME(类名)</code> 中的字符 <code>_</code>，都要被转换为<code>DIRECTORY_SEPARATOR</code>。且字符 <code>_</code> 在命名空间中并没有特殊含义。</li>
<li>当从文件系统中加载文档时，完整有效的命名空间和类要以 <code>.php</code> 结尾。</li>
<li>vendor names, namespaces, 和 class names 都可以由大写或者小写的英文字母组合而成。</li>
</ul>
<h2 id="u4F8B_u5B50"><a href="#u4F8B_u5B50" class="headerlink" title="例子"></a>例子</h2><ul>
<li><code>\Doctrine\Common\IsolatedClassLoader</code> =&gt; <code>/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code></li>
<li><code>\Symfony\Core\Request</code> =&gt; <code>/path/to/project/lib/vendor/Symfony/Core/Request.php</code></li>
<li><code>\Zend\Acl</code> =&gt; <code>/path/to/project/lib/vendor/Zend/Acl.php</code></li>
<li><code>\Zend\Mail\Message</code> =&gt; <code>/path/to/project/lib/vendor/Zend/Mail/Message.php</code></li>
</ul>
<h2 id="u547D_u540D_u7A7A_u95F4_u4E0E_u7C7B_u540D_u4E2D_u7684_u4E0B_u5212_u7EBF"><a href="#u547D_u540D_u7A7A_u95F4_u4E0E_u7C7B_u540D_u4E2D_u7684_u4E0B_u5212_u7EBF" class="headerlink" title="命名空间与类名中的下划线"></a>命名空间与类名中的下划线</h2><ul>
<li><code>\namespace\package\Class_Name</code> =&gt; <code>/path/to/project/lib/vendor/namespace/package/Class/Name.php</code></li>
<li><code>\namespace\package_name\Class_Name</code> =&gt; <code>/path/to/project/lib/vendor/namespace/package_name/Class/Name.php</code></li>
</ul>
<p>我们在标准中所规定的，应当是对于无副作用的互操作性autoloader来说最基本特性。你可以试着遵循这些标准，实现样例 SplClassLoader去加载php5.3的类。</p>
<h2 id="u6837_u4F8B_u5B9E_u73B0"><a href="#u6837_u4F8B_u5B9E_u73B0" class="headerlink" title="样例实现"></a>样例实现</h2><p>以下是一个示例函数来简单的展示以上提到的标准是如何进行自动加载的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">(<span class="variable">$className</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$className</span> = ltrim(<span class="variable">$className</span>, <span class="string">'\\'</span>);</span><br><span class="line">    <span class="variable">$fileName</span>  = <span class="string">''</span>;</span><br><span class="line">    <span class="variable">$namespace</span> = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$lastNsPos</span> = strrpos(<span class="variable">$className</span>, <span class="string">'\\'</span>)) &#123;</span><br><span class="line">        <span class="variable">$namespace</span> = substr(<span class="variable">$className</span>, <span class="number">0</span>, <span class="variable">$lastNsPos</span>);</span><br><span class="line">        <span class="variable">$className</span> = substr(<span class="variable">$className</span>, <span class="variable">$lastNsPos</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$fileName</span>  = str_replace(<span class="string">'\\'</span>, DIRECTORY_SEPARATOR, <span class="variable">$namespace</span>) . DIRECTORY_SEPARATOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$fileName</span> .= str_replace(<span class="string">'_'</span>, DIRECTORY_SEPARATOR, <span class="variable">$className</span>) . <span class="string">'.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">require</span> <span class="variable">$fileName</span>;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">'autoload'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="SplClassLoader__u65B9_u5F0F_u5B9E_u73B0"><a href="#SplClassLoader__u65B9_u5F0F_u5B9E_u73B0" class="headerlink" title="SplClassLoader 方式实现"></a>SplClassLoader 方式实现 </h2><p>下边是一个以SplClassLoader形式实现的，并且遵循前边提到的 autoloader 互操作性标准的加载类的例子，这也正是当前被推荐的遵循标准的加载PHP 5.3 类的方式。</p>
<ul>
<li><a href="http://gist.github.com/221634" target="_blank" rel="external">http://gist.github.com/221634</a></li>
</ul>
<hr>
<h2 id="u539F_u6587_uFF1A"><a href="#u539F_u6587_uFF1A" class="headerlink" title="原文："></a>原文：</h2><h1 id="Autoloading_Standard"><a href="#Autoloading_Standard" class="headerlink" title="Autoloading Standard"></a>Autoloading Standard</h1><blockquote>
<p><strong>Deprecated</strong> - As of 2014-10-21 PSR-0 has been marked as deprecated. <a href="http://www.php-fig.org/psr/psr-4/" target="_blank" rel="external">PSR-4</a> is now recommended<br>as an alternative.    </p>
</blockquote>
<p>The following describes the mandatory requirements that must be adhered<br>to for autoloader interoperability.    </p>
<h2 id="Mandatory"><a href="#Mandatory" class="headerlink" title="Mandatory"></a>Mandatory</h2><ul>
<li>A fully-qualified namespace and class must have the following<br>structure <code>\&lt;Vendor Name&gt;\(&lt;Namespace&gt;\)*&lt;Class Name&gt;</code>    </li>
<li>Each namespace must have a top-level namespace (“Vendor Name”).    </li>
<li><p>Each namespace can have as many sub-namespaces as it wishes.    </p>
</li>
<li><p>Each namespace separator is converted to a <code>DIRECTORY_SEPARATOR</code> when<br>loading from the file system.    </p>
</li>
<li><p>Each <code>_</code> character in the CLASS NAME is converted to a<br><code>DIRECTORY_SEPARATOR</code>. The <code>_</code> character has no special meaning in the<br>namespace.    </p>
</li>
<li><p>The fully-qualified namespace and class is suffixed with <code>.php</code> when<br>loading from the file system.    </p>
</li>
<li><p>Alphabetic characters in vendor names, namespaces, and class names may<br>be of any combination of lower case and upper case.    </p>
</li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ul>
<li><code>\Doctrine\Common\IsolatedClassLoader</code> =&gt; <code>/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code></li>
<li><code>\Symfony\Core\Request</code> =&gt; <code>/path/to/project/lib/vendor/Symfony/Core/Request.php</code></li>
<li><code>\Zend\Acl</code> =&gt; <code>/path/to/project/lib/vendor/Zend/Acl.php</code></li>
<li><code>\Zend\Mail\Message</code> =&gt; <code>/path/to/project/lib/vendor/Zend/Mail/Message.php</code></li>
</ul>
<h2 id="Underscores_in_Namespaces_and_Class_Names"><a href="#Underscores_in_Namespaces_and_Class_Names" class="headerlink" title="Underscores in Namespaces and Class Names"></a>Underscores in Namespaces and Class Names</h2><ul>
<li><code>\namespace\package\Class_Name</code> =&gt; <code>/path/to/project/lib/vendor/namespace/package/Class/Name.php</code></li>
<li><code>\namespace\package_name\Class_Name</code> =&gt; <code>/path/to/project/lib/vendor/namespace/package_name/Class/Name.php</code></li>
</ul>
<p>The standards we set here should be the lowest common denominator for<br>painless autoloader interoperability. You can test that you are<br>following these standards by utilizing this sample SplClassLoader<br>implementation which is able to load PHP 5.3 classes.    </p>
<h2 id="Example_Implementation"><a href="#Example_Implementation" class="headerlink" title="Example Implementation"></a>Example Implementation</h2><p>Below is an example function to simply demonstrate how the above<br>proposed standards are autoloaded.    </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">(<span class="variable">$className</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$className</span> = ltrim(<span class="variable">$className</span>, <span class="string">'\\'</span>);</span><br><span class="line">    <span class="variable">$fileName</span>  = <span class="string">''</span>;</span><br><span class="line">    <span class="variable">$namespace</span> = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$lastNsPos</span> = strrpos(<span class="variable">$className</span>, <span class="string">'\\'</span>)) &#123;</span><br><span class="line">        <span class="variable">$namespace</span> = substr(<span class="variable">$className</span>, <span class="number">0</span>, <span class="variable">$lastNsPos</span>);</span><br><span class="line">        <span class="variable">$className</span> = substr(<span class="variable">$className</span>, <span class="variable">$lastNsPos</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$fileName</span>  = str_replace(<span class="string">'\\'</span>, DIRECTORY_SEPARATOR, <span class="variable">$namespace</span>) . DIRECTORY_SEPARATOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$fileName</span> .= str_replace(<span class="string">'_'</span>, DIRECTORY_SEPARATOR, <span class="variable">$className</span>) . <span class="string">'.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">require</span> <span class="variable">$fileName</span>;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">'autoload'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="SplClassLoader_Implementation"><a href="#SplClassLoader_Implementation" class="headerlink" title="SplClassLoader Implementation"></a>SplClassLoader Implementation</h2><p>The following gist is a sample SplClassLoader implementation that can<br>load your classes if you follow the autoloader interoperability<br>standards proposed above. It is the current recommended way to load PHP<br>5.3 classes that follow these standards.    </p>
<ul>
<li><a href="http://gist.github.com/221634" target="_blank" rel="external">http://gist.github.com/221634</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u8BD1_u6587_uFF1A"><a href="#u8BD1_u6587_uFF1A" class="headerlink" title="译文："></a>译文：</h2><h1 id="u81EA_u52A8_u52A0_u8F7D_u6807_u51C6"><a href="#u81EA_u52A8_u52A0_u8F7D_u6807_u51C6" class="headerlink" title="自动加载标准"></a>自动加载标准</h1><blockquote>
<p><strong>已过时</strong> - PSR-0 已经在2014-10-21日被弃用。 推荐使用<a href="http://www.php-fig.org/psr/psr-4/">PSR-4</a>。</p>
</blockquote>
<p>下面介绍了使autoloader具有互操作性所必须遵守的条件。</p>]]>
    
    </summary>
    
      <category term="PHP 翻译" scheme="http://dabeen.me/tags/PHP-%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://dabeen.me/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[教育留学Wise站点开发时使用video标签时的一些问题总结]]></title>
    <link href="http://dabeen.me/2016/01/28/%E6%95%99%E8%82%B2%E7%95%99%E5%AD%A6wise%E7%AB%99%E7%82%B9%E5%BC%80%E5%8F%91%E6%97%B6%E4%BD%BF%E7%94%A8video%E6%A0%87%E7%AD%BE%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://dabeen.me/2016/01/28/教育留学wise站点开发时使用video标签时遇到的一些问题/</id>
    <published>2016-01-28T10:00:00.000Z</published>
    <updated>2016-01-28T12:17:23.000Z</updated>
    <content type="html"><![CDATA[<p>在移动端使用<code>video</code>进行视频播放时，遇到了各种各样的问题, 由于在 <code>ios</code> 系统对浏览器的限制，所以问题较少，而<code>android</code>系统中各种各样的浏览器各自实现了不同播放效果，有的浏览器的pm脑动大开，居然播放时自动弹出小窗口浮在界面上，类似黄色小广告，总之各种坑。<br>整理了一下，主要包括以下几点。</p>
<a id="more"></a>
<h4 id="u89C6_u9891_u6587_u4EF6_u517C_u5BB9_u6027_u95EE_u9898"><a href="#u89C6_u9891_u6587_u4EF6_u517C_u5BB9_u6027_u95EE_u9898" class="headerlink" title="视频文件兼容性问题"></a>视频文件兼容性问题</h4><p>在项目一开始，资源方给的资源是 <a href="http://baike.baidu.com/link?url=n-VBVJ1dr6yIvfFV3mBUMj3fcv328HkZhlSiWRnyH9GfYu4ZL0nlPqJueKcmxUEueHrw0fY0RWGqfW412wX6Yq" target="_blank" rel="external">webm</a> 格式的视频，<code>google</code> 家的视频标准，<code>google</code> 说效率好，<strong>但是</strong> <code>ios</code> 不能用啊！</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-webm.png" alt="webm兼容性" title="webm兼容性"></p>
<p>在视频资源的选择上，兼容性最好的视频格式还是 <a href="http://baike.baidu.com/subview/1358/8980006.htm" target="_blank" rel="external">mp4</a></p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-mp4.png" alt="mp4兼容性" title="mp4兼容性"></p>
<p>在项目中选择<code>mp4</code>的话基本能覆盖所有的浏览器</p>
<p>当然如果你觉得还不够的话你可以使用 <a href="http://www.w3school.com.cn/tags/tag_source.asp" target="_blank" rel="external"><code>source</code></a> 标签为你的 <code>video</code> 准备多个不同类型的视频文件，当然这也意味着你的服务器要存储多份不同格式的资源。</p>
<h4 id="u5404_u79CD_u4E0D_u540C_u6D4F_u89C8_u5668_u4E0A_video__u7A97_u53E3_u6709_u5404_u79CD_u4E0D_u540C_u7684_style"><a href="#u5404_u79CD_u4E0D_u540C_u6D4F_u89C8_u5668_u4E0A_video__u7A97_u53E3_u6709_u5404_u79CD_u4E0D_u540C_u7684_style" class="headerlink" title="各种不同浏览器上 video 窗口有各种不同的 style"></a>各种不同浏览器上 <code>video</code> 窗口有各种不同的 <code>style</code></h4><p>文件不能播放的问题解决了，于是又出现了新的问题，我们打开各种不同的手机的浏览器，发现同样一个页面，播放器的样式却五花八门。</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-player-style.jpg" alt="不同浏览器上的样式"></p>
<blockquote>
<p>上边的图片来自 <a href="http://www.xuanfengge.com/html5-video-play.html" target="_blank" rel="external">这里</a></p>
</blockquote>
<p>为了让大家在不同的浏览器中看到的样子都是一样的，在页面加载完时不显示播放器，而播放器的位置用一个封面和播放按钮代替，当点击封面时，再让播放器播放，如下图</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-imgForVideo.png" alt="为video覆盖一层img"></p>
<blockquote>
<p>最好不要用{display: none}或者{width:0;height:0;}的方式，因为这样视频元素会处于未激活的状态，给后续的处理带来麻烦。最佳的方式是将视频设置成1×1像素大小，放在视觉边缘的位置。from:<a href="http://www.xuanfengge.com/html5-video-play.html" target="_blank" rel="external">这里</a></p>
</blockquote>
<p>上边说的方式是比较合理的但是做的时候注意以下边缘的位置，如果是在页面内的边缘位置的话，在<strong>UC浏览器</strong>上播放按钮还是会神奇的显示露出来</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-uc-Video.png" alt="uc浏览器上按钮出来了"></p>
<p>那就把他扔到火星好了, <code>left: -10000px</code>, 这样样式的问题算是基本解决了~</p>
<h4 id="z-index__u5931_u6548_u95EE_u9898"><a href="#z-index__u5931_u6548_u95EE_u9898" class="headerlink" title="z-index 失效问题"></a><code>z-index</code> 失效问题</h4><p>后面开始播放视频了，真的<code>video</code>窗口出来了于是又出现了新一轮的问题，在播放时某些视频窗会一直在页面的最顶部,设置<code>z-index</code>也没有效果。严重影响页面的正常使用。</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-videoAlwaysTop.png" alt="video一直在最顶层"></p>
<p><code>ios</code>上除了<strong>骄傲的启用了X5浏览服务的qq浏览器</strong>（qq的浏览器完全是小窗口式的）外，这个问题基本不存在，<code>safari</code>一般都是全屏播放，其他的浏览器有的是行内播放有的是与<code>safari</code>一样全屏播放，但都没有什么的问题；<strong>但是</strong> <code>android</code> 上这个问题比较严重，国产的好多浏览器都以上图的这种姿势显示。</p>
<p>为了解决这个问题，尝试让视频直接全屏播放，但是这又出现了下面要说的<a href="/#全屏播放不兼容问题">全屏播放不兼容的问题</a></p>
<p>既然不能全屏播放，又不能播放时，挡住了一些弹出的层，那只好让他在播放时不要出现那些弹出的层好了。</p>
<p>于是就出现了一个解决方案，<strong>在点击播放按钮时，弹出一个遮罩，盖住整个页面，然后遮罩上有一个播放器下边有一个退出按钮，当然还要注意弹出后页面最好不能滚动，谨慎使用fixed</strong>。总之就是让播放器自己去一个小黑屋玩就好了，不要让一个害群之马影响世界的和谐友善，等你玩完了，再回来，大家还是会忘掉过去重新接纳他的，就像什么都没发生过一样~</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-video-self.png" alt="视频自己在一边播放"></p>
<h4 id="u5168_u5C4F_u64AD_u653E_u4E0D_u517C_u5BB9_u95EE_u9898"><a href="#u5168_u5C4F_u64AD_u653E_u4E0D_u517C_u5BB9_u95EE_u9898" class="headerlink" title="全屏播放不兼容问题"></a>全屏播放不兼容问题</h4><p>还有这个全屏播放不兼容的问题</p>
<p>其实大部分浏览器都是挺和谐的，<strong>玩完没想到</strong>的是我厂的手百居然给出了这样的姿势</p>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-160128-fullscreen.png" alt="手百全屏播放"></p>
<p><strong>这尼玛也叫全屏！！！！！！这明显的五毛特效！</strong> 退出去的按钮居然都找不到了。这让页面上的其他元素怎么办。。</p>
<p>本着兼容我厂产品的态度，这种全屏方式显然不可取。</p>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><p>video的坑还有很多，这里只写了几个在教育wise站中遇都的这几个，欢迎大家补充，指正。</p>
<h3 id="u76F8_u5173_u8D44_u6599"><a href="#u76F8_u5173_u8D44_u6599" class="headerlink" title="相关资料"></a>相关资料</h3><p><a href="http://www.xuanfengge.com/html5-video-play.html" target="_blank" rel="external">移动端HTML5 video 视频播放优化实践</a></p>
<p><a href="http://blog.csdn.net/zhangxin09/article/details/45147021" target="_blank" rel="external">HTML5 播放器心得与小结</a></p>
<p><a href="https://www.w3.org/TR/html5/embedded-content-0.html#the-video-element" target="_blank" rel="external">W3C Video 标准</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在移动端使用<code>video</code>进行视频播放时，遇到了各种各样的问题, 由于在 <code>ios</code> 系统对浏览器的限制，所以问题较少，而<code>android</code>系统中各种各样的浏览器各自实现了不同播放效果，有的浏览器的pm脑动大开，居然播放时自动弹出小窗口浮在界面上，类似黄色小广告，总之各种坑。<br>整理了一下，主要包括以下几点。</p>]]>
    
    </summary>
    
      <category term="html5" scheme="http://dabeen.me/tags/html5/"/>
    
      <category term="video" scheme="http://dabeen.me/tags/video/"/>
    
      <category term="前端" scheme="http://dabeen.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="坑" scheme="http://dabeen.me/tags/%E5%9D%91/"/>
    
      <category term="前端开发" scheme="http://dabeen.me/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015总结与2016规划]]></title>
    <link href="http://dabeen.me/2016/01/26/2015%E6%80%BB%E7%BB%93%E4%B8%8E2016%E8%A7%84%E5%88%92/"/>
    <id>http://dabeen.me/2016/01/26/2015总结与2016规划/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2016-01-27T08:39:42.000Z</updated>
    <content type="html"><![CDATA[<p>总结2015年的工作，并规划2016年的学习计划~</p>
<a id="more"></a>
<h3 id="2015_u603B_u7ED3"><a href="#2015_u603B_u7ED3" class="headerlink" title="2015总结"></a>2015总结</h3><h4 id="15_u5E74_u53C2_u4E0E_u7684_u9879_u76EE"><a href="#15_u5E74_u53C2_u4E0E_u7684_u9879_u76EE" class="headerlink" title="15年参与的项目"></a>15年参与的项目</h4><ul>
<li><p>病友圈</p>
</li>
<li><p><a href="http://liuxue.baidu.com/visa/all" target="_blank" rel="external">百度教育留学站点PC中间页</a></p>
</li>
<li><p><a href="http://liuxue.baidu.com/miletus?wd=%E6%89%98%E7%A6%8F%E5%AD%A6%E4%B9%A0&amp;stgSpace=edu&amp;qid=1453790192518826959&amp;pvid=1453790192518826959&amp;zt=self&amp;pssid=0&amp;tn=NONE&amp;queryTag=3" target="_blank" rel="external">百度教育留学阡陌卡片</a></p>
</li>
<li><p>百度糯米<code>CRM</code>–Mall打透 </p>
</li>
<li><p>百度糯米<code>POI</code>–强提醒强校验优化</p>
</li>
<li><p>百度糯米<code>POI</code>–一键搬家项目</p>
</li>
<li><p><a href="http://liuxue.baidu.com/miletus?wd=%E6%89%98%E7%A6%8F&amp;stgSpace=edu" target="_blank" rel="external">百度教育留学站WISE中间页</a></p>
</li>
<li><p><a href="https://github.com/ecomfe/edp-package" target="_blank" rel="external"><code>Edp-Package</code></a>流程整理，以及<code>unimport</code>功能开发</p>
</li>
</ul>
<h4 id="u4E2A_u4EBA_u6210_u957F"><a href="#u4E2A_u4EBA_u6210_u957F" class="headerlink" title="个人成长"></a>个人成长</h4><ul>
<li><p>自2015年7月22日入职百度以来，参与的各个项目，覆盖了前端开发的多个领域，包括<code>PC端</code>、<code>WISE端</code>、<code>NA端</code>、以及<code>node</code>。</p>
</li>
<li><p>学会了使用前端的工程化工具 <code>EDP</code> 来对前端项目进行管理与构建，加深了对前端工程化的理解。源码的编译，源码压缩，合并, 依赖管理等。</p>
</li>
<li><p>学会了使用<code>less</code>、<code>stylus</code>等css预编译工具来提高css的编写效率</p>
</li>
<li><p>学会了使用不同的框架，<code>esl</code>、<code>est</code>、<code>etpl</code>, <code>saber</code>、<code>vuejs</code>、<code>amazeUI</code>等</p>
</li>
<li><p>加深了对<code>MVC</code>、<code>MVP</code>、<code>MVVM</code>设计模式的理解</p>
</li>
<li><p>对以前使用过的框架也理解的更加深入, <code>jquery</code>、<code>backbone</code>、<code>requirejs</code>、<code>bootstrap</code>等</p>
</li>
</ul>
<h3 id="2016_u89C4_u5212"><a href="#2016_u89C4_u5212" class="headerlink" title="2016规划"></a>2016规划</h3><h4 id="u9879_u76EE"><a href="#u9879_u76EE" class="headerlink" title="项目"></a>项目</h4><ul>
<li>在未来所负责的项目当中承担更多的责任，将更多新技术在项目的推广使用，以提升项目的开发效率，总结整理前端项目，提取公共代码，为项目构建统一的样式库、组件库等。</li>
</ul>
<h4 id="u4E2A_u4EBA_u6210_u957F-1"><a href="#u4E2A_u4EBA_u6210_u957F-1" class="headerlink" title="个人成长"></a>个人成长</h4><ul>
<li><p>学习<code>webpack</code>、<code>es6</code>、<code>node</code>、<code>react-native</code>、<code>swift</code>，向<code>全栈</code>以及<code>全端</code>的方向发展</p>
</li>
<li><p>学习一些<code>设计</code>以及<code>产品</code>相关的知识</p>
</li>
<li><p>推动一个项目</p>
</li>
<li><p>多总结、多整理，养成写博客的习惯</p>
</li>
<li><p>多使用<code>github</code>，为团队的开源项目贡献代码,让个人主页的<code>contributions</code>里绿框超过<code>50%</code>,朝下图方向努力~ </p>
</li>
</ul>
<p><img src="http://7xq7um.com1.z0.glb.clouddn.com/dabeen-cn-github-jietu.png" alt="别人的图"></p>
<ul>
<li>升T4</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>总结2015年的工作，并规划2016年的学习计划~</p>]]>
    
    </summary>
    
      <category term="个人总结" scheme="http://dabeen.me/tags/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
      <category term="工作相关" scheme="http://dabeen.me/categories/%E5%B7%A5%E4%BD%9C%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://dabeen.me/2016/01/20/hello-world/"/>
    <id>http://dabeen.me/2016/01/20/hello-world/</id>
    <published>2016-01-19T16:00:00.000Z</published>
    <updated>2016-01-27T08:53:21.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
  </entry>
  
</feed>
